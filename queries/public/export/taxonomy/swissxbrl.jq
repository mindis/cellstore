jsoniq version "1.0";

import module namespace concepts = "http://28.io/modules/xbrl/concepts";
import module namespace components = "http://28.io/modules/xbrl/components";
import module namespace networks = "http://28.io/modules/xbrl/networks";
import module namespace labels = "http://28.io/modules/xbrl/labels";

import module namespace archive = "http://zorba.io/modules/archive";
import module namespace mongo = "http://www.28msec.com/modules/mongodb";
import module namespace credentials = "http://www.28msec.com/modules/credentials";
import schema namespace mongos = "http://www.28msec.com/modules/mongodb/types";

declare namespace xs = "http://www.w3.org/2001/XMLSchema";
declare option rest:response "first-item";

declare variable $cred := credentials:credentials("MongoDB", "xbrl");
declare variable $con := mongo:connect($cred);

declare variable $defaultResponse as object := {
  "content-type": "application/xml;charset=utf-8"
};
declare variable $query := {};
declare variable $components := mongo:find($con, "components", $query, {});
declare variable $concepts := $components.Concepts[];
declare variable $comment :=
  comment { "
    Version: " || current-dateTime() || " (" || $cred.db || ")
    Designed by XBRL Switzerland Working Group
    Generated by 28msec (28.io)
" };
declare variable $serialization-parameters :=
    <serialization-parameters xmlns="http://www.w3.org/2010/xslt-xquery-serialization">
      <method value="xml"/>
      <indent value="yes"/>
      <encoding value="UTF-8"/>
    </serialization-parameters>;

declare  %rest:case-insensitive                 variable $part              as string? external := "archive";
declare  %rest:case-insensitive                 variable $name              as string? external := "ch-or";

declare function local:schema($taxonomyName as string)
{
  $comment,
  <schema targetNamespace="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26"
      elementFormDefault="qualified"
      xmlns="http://www.w3.org/2001/XMLSchema"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:link="http://www.xbrl.org/2003/linkbase"
      xmlns:xbrli="http://www.xbrl.org/2003/instance"
      xmlns:xbrldt="http://xbrl.org/2005/xbrldt"
      xmlns:ch-co="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26">
    <import namespace="http://www.xbrl.org/2003/instance" schemaLocation="http://www.xbrl.org/2003/xbrl-instance-2003-12-31.xsd"/>
    <import namespace="http://xbrl.org/2005/xbrldt" schemaLocation="http://www.xbrl.org/2005/xbrldt-2005.xsd" />
    {
      components:to-xml-annotation($components, $taxonomyName),
      concepts:to-xml($concepts)
    }
  </schema>
};

declare function local:labels($taxonomyName as string)
{
  $comment,
  <linkbase
      xmlns="http://www.xbrl.org/2003/linkbase"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:ch-co="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xbrli="http://www.xbrl.org/2003/instance"
      xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">
  {
    labels:to-xml($concepts, $taxonomyName)
  }
  </linkbase>
};

declare function local:presentation($taxonomyName as string)
{
  $comment,
  <linkbase
      xmlns="http://www.xbrl.org/2003/linkbase"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:ch-co="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xbrli="http://www.xbrl.org/2003/instance"
      xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">
  {
    components:to-xml-roleRefs($components, $taxonomyName),
    for $component in $components
    let $presentationNetwork as object? := networks:networks-for-components-and-short-names($component, $networks:PRESENTATION_NETWORK)
    where exists($presentationNetwork) and $component.Role ne null
    return networks:to-xml($presentationNetwork, $component, $taxonomyName)
  }
  </linkbase>
};

declare function local:calculation($taxonomyName as string)
{
  $comment,
  <linkbase
      xmlns="http://www.xbrl.org/2003/linkbase"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:ch-co="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xbrli="http://www.xbrl.org/2003/instance"
      xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">
  {
    components:to-xml-roleRefs($components, $taxonomyName),
    for $component in $components
    let $calculationNetwork as object? := networks:networks-for-components-and-short-names($component, $networks:CALCULATION_NETWORK)
    where exists($calculationNetwork) and $component.Role ne null
    return networks:to-xml($calculationNetwork, $component, $taxonomyName)
  }
  </linkbase>
};

declare function local:definition($taxonomyName as string)
{
  $comment,
  <linkbase
      xmlns="http://www.xbrl.org/2003/linkbase"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:ch-co="http://www.xbrl-ch.ch/ch/fr/co/gp/2015-02-26"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xbrli="http://www.xbrl.org/2003/instance"
      xsi:schemaLocation="http://www.xbrl.org/2003/linkbase http://www.xbrl.org/2003/xbrl-linkbase-2003-12-31.xsd">
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/all" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#all"/>
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/dimension-domain" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#dimension-domain"/>
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/domain-member" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#domain-member"/>
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/hypercube-dimension" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#hypercube-dimension"/>
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/notAll" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#notAll"/>
    <arcroleRef arcroleURI="http://xbrl.org/int/dim/arcrole/dimension-default" xlink:type="simple" xlink:href="http://www.xbrl.org/2005/xbrldt-2005.xsd#dimension-default"/>
    {
      components:to-xml-roleRefs($components, $taxonomyName),
      for $component in $components
      for $hypercube in values($component.Hypercubes)
      where $component.Role ne null
      return networks:to-xml($hypercube, $component, $taxonomyName)
    }
  </linkbase>
};

declare function local:archive($taxonomyName as string)
{
  let $schema as string := serialize(local:schema($taxonomyName), $serialization-parameters)
  let $labels as string := serialize(local:labels($taxonomyName), $serialization-parameters)
  let $presentation as string := serialize(local:presentation($taxonomyName), $serialization-parameters)
  let $calculation as string := serialize(local:calculation($taxonomyName), $serialization-parameters)
  let $definition as string := serialize(local:definition($taxonomyName), $serialization-parameters)
  let $archive as xs:base64Binary := archive:create(
    (
      { "type" : "directory", "name" : $taxonomyName },
      { "encoding" : "utf-8", "type" : "regular", "name" : $taxonomyName || "/" || $taxonomyName || ".xsd" },
      { "encoding" : "utf-8", "type" : "regular", "name" : $taxonomyName || "/" || $taxonomyName || "_lab.xml" },
      { "encoding" : "utf-8", "type" : "regular", "name" : $taxonomyName || "/" || $taxonomyName || "_pre.xml" },
      { "encoding" : "utf-8", "type" : "regular", "name" : $taxonomyName || "/" || $taxonomyName || "_cal.xml" },
      { "encoding" : "utf-8", "type" : "regular", "name" : $taxonomyName || "/" || $taxonomyName || "_def.xml" }
    ),
    (
      $schema,
      $labels,
      $presentation,
      $calculation,
      $definition
    )
  )
  return
    (
      {
        "content-type": "application/zip",
        "serialization":
        {
          "method": "binary"
        },
        "headers": {
          "Pragma": "public",
          "Expires": "0",
          "Cache-Control": "must-revalidate, post-check=0, pre-check=0",
          "Content-Disposition": "attachment; filename='" || $taxonomyName || ".zip';",
          "Content-Transfer-Encoding": "binary"
        }
      },
      $archive
    )
};

let $taxonomyName as string := $name || "-" || substring(string(current-date()), 1, 10)
return
  switch ($part)
  case "schema" return ($defaultResponse, local:schema($taxonomyName))
  case "labels" return ($defaultResponse, local:labels($taxonomyName))
  case "presentation" return ($defaultResponse, local:presentation($taxonomyName))
  case "calculation" return ($defaultResponse, local:calculation($taxonomyName))
  case "definition" return ($defaultResponse, local:definition($taxonomyName))
  case "archive" return local:archive($taxonomyName)
  default return error(xs:QName("err:Error"), "unknown part " || $part)